#!/usr/bin/env python

import os
import time
from modules.init_connection import parse_csv_urlhaus, init_connection_urlhaus, periodic_link
from modules.init_database import init_mongo, connect_database
from modules.request_database import get_hash_malware, get_ip_malware, get_label_malware
from modules.vt_process import periodic_vt
from modules.file_process import print_database, print_gridfs, count_database, count_gridfs
from threading import Thread 

dir_path = os.path.dirname(os.path.realpath(__file__))

def main():
    """
    Fonction Main
    init, -- Clean the database
    run, -- Crawler runs, parses the csv file, collects information from the different files and stores them in the Mongo database
    count, -- Summary of processed files in the database
    print, -- List elements present in the database
    """
    print("Enter 'run' to download files from urlhaus")
    print("Enter 'init' to initializate the database")
    print("Enter 'print' to print the database")
    print("Enter 'count' to count everything in database")
    print("Enter 'md5', 'sha256', 'sha1', 'ssdeep' or 'imphash' to make a request to the database")
    print("Enter 'ip' to make a request to the database")
    print("Enter 'label' to make a request to the database")
    
    input_user = input("Enter value\n")
    client, db = connect_database() 

    if input_user == "init":
        os.system("celery -A modules.init_connection purge -f")
        init_mongo()
    elif input_user == "run":
        Thread(target=periodic_vt, daemon=True).start()
        Thread(target=periodic_link, daemon=True).start()
        request = init_connection_urlhaus()
        parse_csv_urlhaus(db, request)
    elif input_user == "count":
        count_gridfs(db)
        count_database(db)
    elif input_user == "print":
        print_gridfs(db)
        print_database(db)
    elif input_user == "md5" or input_user == "sha256" or input_user == "sha1" or input_user == "ssdeep" or input_user == "imphash" :
        type_hash = input_user
        input_user = input("Enter hash\n")
        get_hash_malware(db, type_hash, input_user)
    elif input_user =="ip":
        input_user = input("Enter ip\n")
        get_ip_malware(db, input_user)
    elif input_user =="label":
        input_user = input("Enter label\n")
        get_label_malware(db, input_user)
    
    client.close()


if __name__ == "__main__":
    main()
