#!/usr/bin/env python

from pymongo import MongoClient
from collections import OrderedDict
import sys
import urllib.request
import requests
import shutil
import gridfs
import mimetypes
from .init_database import *
from .file_process import *

fpath = "report/"

def file_from_url_to_gridfs (file_url, file_name):
    client, db = connect_database()
    try:
        print("Put file from " + file_url + " to GriFS db.")
        fs = gridfs.GridFS(db)
        r = requests.get(file_url, stream=True, allow_redirects=True, timeout=2)
        mime_type = mimetypes.guess_type(file_url)
        with open(fpath + file_name, "wb") as tmp_file:
            for chunk in r.iter_content(chunk_size=1024):
                if chunk:
                    tmp_file.write(chunk)
        with open(fpath + file_name, "rb") as tmp_file:
            _id = fs.put(tmp_file, contentType=mime_type, filename=file_name)
            print("Done.")
            return _id
    except:
        print("connection to link " + file_url + " failed.")


def add_malware_collection(id_malware, source_malware, date_added, url_malware, url_status, threat, tags, urlhaus_link, reporter_malware):
    try:
        client,db = connect_database()
        query = {"id_malware":id_malware,
                "source_malware":source_malware,
                "date_added_malware":date_added,
                "url_malware":url_malware,
                "url_status_malware":url_status,
                "threat_malware": threat,
                "tags_malware": tags,
                "url_haus_malware":urlhaus_link,
                "reporter_malware":reporter_malware,
                "vt_report_malware":False,
        }
        db.malware_collection.insert(query)
        print("All good. File ID " + id_malware + " added to MongoDB.")
        client.close()
        return True
    except: 
        print("exc:", sys.exc_info())       

def add_vt_collection(scan_id_vt, total_scan_vt, positives_vt, resource_vt, response_vt, scan_date_vt, permalinks_vt, sha256_vt, md5_vt, sha1_vt, entire_report_vt, id_malware_vt):
    try:
        client, db = connect_database()
        query = {"scan_id_vt": scan_id_vt,
                 "total_scan_vt":total_scan_vt,
                 "positives_vt": positives_vt,
                 "response_vt":response_vt,
                 "resource_vt":resource_vt,
                 "scan_date_vt":scan_date_vt,
                 "permalinks_vt": permalinks_vt,
                 "sha256_vt": sha256_vt,
                 "sha1_vt": sha1_vt,
                 "md5_vt":md5_vt,
                 "entire_report_vt":entire_report_vt,
                 "id_malware_vt":id_malware_vt,
        }
        db.vt_collection.insert(query)
        print("All good.")
        client.close()
    except: 
        print("exc:", sys.exc_info())       

def add_label_collection(id_malware_label, output_avclassplusplus):

    try:
        client, db = connect_database()
        query = {"id_malware_label": id_malware_label,
                 "label": output_avclassplusplus,
        }
        db.label_collection.insert(query)
        print("All good.")
        client.close()
    except:
        print("exc:", sys.exc_info())
 
def add_ip_collection(id_malware_ip, ip, country_name, country_code, continent_code, continent_name,region_name, region_code, city, zip, latitude, longitude, full_report):

    try:
        client, db = connect_database()
        query = {"id_malware_ip": id_malware_ip,
                "address_ip":ip,
                "country_name_ip": country_name,
                "country_code_ip":country_code,
                "continent_name_ip":continent_name,
                "continent_code_ip":continent_code,
                "region_name_ip":region_name,
                "region_code_ip":region_code,
                "city_ip":city,
                "zip_ip":zip,
                "latitude_ip":latitude,
                "longitude_ip":longitude,
                "full_report_ip":full_report,
        }
        db.ip_collection.insert(query)
        print("All good.")
        client.close()
    except:
        print("exc:", sys.exc_info())     
