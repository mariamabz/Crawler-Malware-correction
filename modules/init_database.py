#!/usr/bin/env python

from pymongo import MongoClient
from collections import OrderedDict
import sys
import gridfs

def init_mongo():
    """
    Initialisation Mongo database
    Params:
    - none
    Returns:
    - none
    """
    client = MongoClient('mongodb://127.0.0.1:27017')
    db = client.crawler_malware
    create_collections(db)
    erase_gridfs()

def erase_gridfs():
    """
    Erase gridfs database
    Params:
    -none
    Returns:
    - none
    """

    client, db = connect_database()
    fs = gridfs.GridFSBucket(db)
    for gridout in fs.find():
        fs.delete(gridout._id)
    client.close()

def connect_database():
    """
    connecting the database
    Params:
    - none
    Returns:
    - client,db
    """
    client = MongoClient('mongodb://127.0.0.1:27017')
    db = client.crawler_malware
    return client,db

def create_collections(db):
    """
    Create collection
    Params:
    - db
    Returns:
    - none
    """
    create_malware_collection(db)
    create_vt_collection(db)
    create_label_collection(db)
    create_ip_collection(db)

    
def create_malware_collection(db):

    """
    add atribute in malware collection
    Params:
    - db
    Returns:
    - none
    """
    db.malware_collection.drop()
    db.create_collection( "malware_collection")

    vexpr = {
        "$jsonSchema": {
            "bsonType": "object",
	    "uniqueItems": True,
            "required": [ "id_malware" ],
            "properties": {
                "id_malware": {
                "bsonType": "string",
                },
                "source_malware": {
                "bsonType": "string",
                },
                "date_added_malware": {
                "bsonType": "string",
                },
                "url_malware": {
                "bsonType": "string",
                },
                "url_status_malware": {
                "bsonType": "bool",
                },
                "threat_malware": {
                "bsonType": "string",
                },
                "tags_malware": {
                "bsonType": "string",
                },
                "url_haus_malware":{
                "bsonType": "string",
                },
                "reporter_malware": {
                "bsonType": "string",
                },
                "md5_malware": {
                "bsonType": "string",
                },
                "sha256_malware": {
                "bsonType": "string",
                },
                "sha1_malware": {
                "bsonType": "string",
                },
                "ssdeep_malware": {
                "bsonType": "string",
                },
                "is_exe_malware": {
                "bsonType": "bool",
                },
                "imphash_malware": {
                "bsonType": "string",
                },
                "vt_report_malware": {
                "bsonType": "bool"
                }
	    }                
        }    
    }

    cmd = OrderedDict([('collMod', 'malware_collection'),
        ('validator', vexpr),
        ('validationLevel', 'moderate')])

    db.command(cmd)

    db.malware_collection.create_index("id_malware")

def create_vt_collection(db):

    """
    add atribute in virus total collection
    Params:
    - db
    Returns:
    - none
    """

    db.vt_collection.drop()
    db.create_collection("vt_collection")

    vexpr = {
        "$jsonSchema": {
            "bsonType": "object",
            "required": [ "id_malware_vt" ],
            "properties": {
                "scan_id_vt" : {
                   "bsonType" : "string"
                },
                "total_scan_vt" : {
                   "bsonType": "int",
                },
                "positives_vt" : {
                   "bsonType": "int",
                },
                "resource_vt" : {
                   "bsonType": "string",
                },
                "response_vt" : {
                   "bsonType": "int",
                },
                "scan_date_vt" : {
                   "bsonType": "string",
                },
                "permalink_vt" : {
                   "bsonType": "string",
                },
                "sha256_vt" : {
                   "bsonType": "string",
                },
                "sha1_vt" : {
                   "bsonType": "string",
                },
                "md5_vt" : {
                  "bsonType": "string",
                },
                "entire_report_vt" : {
                  "bsonType": "string",
                },
                "id_malware_vt" : {
                   "bsonType": "string",
                }
            }
        }
    }

    cmd = OrderedDict([('collMod', 'vt_collection'),
            ('validator', vexpr),
        ('validationLevel', 'moderate')])

    db.command(cmd)

    db.vt_collection.create_index("scan_id_vt")

def create_label_collection(db):
    """
    add atribute in label collection
    Params:
    - db
    Returns:
    - none
    """

    db.label_collection.drop()
    db.create_collection( "label_collection")

    vexpr = {
        "$jsonSchema": {
            "bsonType": "object",
            "required": [ "id_malware_label" ],
            "properties": {
                "id_malware_label" : {
                   "bsonType": "string",
                },
                "label" : {
                   "bsonType": "string",
                }
            }                
        } 
    }

    cmd = OrderedDict([('collMod', 'label_collection'),
            ('validator', vexpr),
            ('validationLevel', 'moderate')])

    db.command(cmd)
    db.label_collection.create_index("id_malware_label")

def create_ip_collection(db):
    
    """
    add atribute in ip collection
    Params:
    - db
    Returns:
    - none
    """

    db.ip_collection.drop()
    db.create_collection( "ip_collection")

    vexpr = {
        "$jsonSchema": {
            "bsonType": "object",
            "required": [ "address_ip" ],
            "properties": {
                "id_malware_ip" : {
                    "bsonType": "string",
                },
                "address_ip" : {
                    "bsonType": "string",
                },
                "country_name_ip" : {
                    "bsonType": "string",
                },
                "continent_code_ip" : {
                    "bsonType": "string",
                },
                "continent_name_ip" : {
                    "bsonType": "string",
                },
                "country_code_ip" : {
                    "bsonType": "string",
                },
                "region_code_ip" : {
                    "bsonType": "string",
                },
                "region_name_ip" : {
                    "bsonType" : "string",
                },
                "city_ip" : {
                    "bsonType" : "string",
                },
                "zip_ip" : {
                    "bsonType" : "string",
                },
                "latitute_ip" : {
                    "bsonType" : "double",
                },
                "longitute_ip" : {
                    "bsonType" : "double",
                },
                "full_report_ip" : {
                    "bsonType" : "string",
                },
	    }                
        } 
    }

    cmd = OrderedDict([('collMod', 'ip_collection'),
        ('validator', vexpr),
        ('validationLevel', 'moderate')])

    db.command(cmd)
    db.ip_collection.create_index("address_ip")

def test():

    try:
        okdoc = {"id_malware":"1", "source_malware":"test", "tags_malware":"test"}
        db.malware_collection.insert(okdoc)
        print("All good.")
    except:
        print("exc:", sys.exc_info())
