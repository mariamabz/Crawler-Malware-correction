from flask import render_template, request, Blueprint
import os
from threading import Thread 
from webapp.modules.init_database import init_mongo, connect_database
from webapp.modules.vt_process import periodic_vt
from webapp.modules.init_connection import parse_csv_urlhaus2, init_connection_urlhaus, periodic_link
from webapp.modules.resultats import item_count
from webapp.modules.table import table_to_html, generate_table
import gridfs

from .extensions import mongo 

main = Blueprint('main', __name__)
dir_path = os.path.dirname(os.path.realpath(__file__))
client, db = connect_database()


@main.route('/', methods=['GET', 'POST'])
@main.route('/home', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        if request.form.get('init') == 'init':
            os.system("celery -A modules.init_connection purge -f")
            init_mongo()
            run_value='run'
        elif request.form.get('run') == 'run':
            global thread3, stop_threads
            stop_threads=True
            run_value='stop'
            thread1 = Thread(target=periodic_vt, daemon=True)
            thread1.start()
            thread2=Thread(target=periodic_link, daemon=True)
            thread2.start()
            req = init_connection_urlhaus()
            thread3 = Thread(target=parse_csv_urlhaus2, args=(db, req,lambda : stop_threads), daemon=True)
            thread3.start()
        elif request.form.get('run') == 'stop':
            run_value='run'
            stop_threads=False
            thread3.join()
        elif request.form.get('load_dump') == 'load dump':
            run_value='run'
            os.system('mongorestore ./webapp/dumps/dump2/')
        else:
            run_value='run'
            return render_template("home.html", run_value=run_value)
    else:
        run_value='run'
    return render_template("home.html", run_value=run_value)



@main.route('/ip', methods=['GET', 'POST'])
def ip():
    ip = request.form['ip']
    all_data = mongo.db.ip_collection.find({"address_ip": ip})
    list_of_columns = ["_id", "id_malware_ip", "address_ip", "country_name_ip", "country_code_ip", "continent_name_ip", "continent_code_ip", "region_name_ip", "region_code_ip", "city_ip", "zip_ip", "latitude_ip", "longitude_ip"]
    data = [[ data[column] for column in list_of_columns]for data in all_data]
    malware_columns=["source_malware", "date_added_malware", "url_malware", "url_status_malware", "threat_malware", "tags_malware", "url_haus_malware", "reporter_malware", "vt_report_malware"]
    for row in data:
        id=row[1]
        all_malware=mongo.db.malware_collection.find({"id_malware": id})
        for row_ in all_malware:
            row+=[row_[column] for column in malware_columns]
    list_of_columns+=malware_columns
    return render_template('ip.html', list_of_columns=list_of_columns, data=data)

@main.route('/label', methods=['GET', 'POST'])
def label():
    label = request.form['label']
    list_of_columns = ["_id", "label", "id_malware_label"]
    all_data = mongo.db.label_collection.find({"label": label})
    data = [[ data[column] for column in list_of_columns]for data in all_data]
    malware_columns=["source_malware", "date_added_malware", "url_malware", "url_status_malware", "threat_malware", "tags_malware", "url_haus_malware", "reporter_malware", "vt_report_malware"]
    for row in data:
        id=row[2]
        all_malware=mongo.db.malware_collection.find({"id_malware": id})
        for row_ in all_malware:
            row+=[row_[column] for column in malware_columns]
    list_of_columns+=malware_columns
    return render_template('label.html', list_of_columns=list_of_columns, data=data)

@main.route('/about', methods=['POST', 'GET'])
def about():
    return render_template('about.html', title='About')

@main.route('/resultats', methods=['GET', 'POST'])
def resultats():
    # if request.method == 'POST':
    if request.form.get('Print') == 'Print':
        html="-----print----"
        fs = gridfs.GridFSBucket(db)
        list_of_columns = ["_id", "filename", "content_type"]
        data = [[str(gridout._id), str(gridout.filename), str(gridout.contentType)] for gridout in fs.find() ]
        html = "<h2> GRIDFS</h2>"
        html +=  table_to_html(list_of_columns, data)
        html += "</br><h2> Malware Collection </h2>"
        html += generate_table(mongo.db.malware_collection.find())
        html += "</br><h2> Vt collection</h2>"
        html += generate_table(mongo.db.vt_collection.find())
        html += "</br><h2> IP Collection </h2>"
        html += generate_table(mongo.db.ip_collection.find())
        html += "</br> <h2> Label Collection </h2>"
        html += generate_table(mongo.db.label_collection.find())
        
        return render_template('resultats.html', html=html)
    
    if request.form.get('Count') == 'Count':
        data=item_count(db)
        html=table_to_html(["item", "count"], data=data)
        return render_template('resultats.html', html=html)
    
    return render_template('resultats.html', html="")

@main.route('/requetes', methods=['GET', 'POST'])
def requetes():
    if request.method == 'POST':
        if request.form.get('Ip') == 'Ip':
            return render_template('ip.html')
        elif request.form.get('Label') == 'Label':
            return render_template('label.html')
        elif request.form.get('Hash') == 'Hash':
            return render_template('hash.html')
    return render_template('requetes.html')

@main.route('/hash', methods=['GET', 'POST'])
def hash():
    if request.method == 'POST':
        type=list(request.form)[0]
        return render_template('hash_detailed.html', type=type )
    return render_template('hash.html')

@main.route('/hash_detailed', methods=['GET', 'POST'])
def hash_detailed():
    if request.method == 'POST':
        type=list(request.form)[0]
        valeur=request.form[type]
        all_data = mongo.db.vt_collection.find({type+"_vt": valeur})
        print(all_data)
        list_of_columns=["_id", "scan_id_vt", "total_scan_vt", "positives_vt", "response_vt", "resource_vt", "scan_date_vt", "permalinks_vt", "sha256_vt", "sha1_vt", "md5_vt", "id_malware_vt"]
        data = [[ data[column] for column in list_of_columns]for data in all_data]
        malware_columns=["source_malware", "date_added_malware", "url_malware", "url_status_malware", "threat_malware", "tags_malware", "url_haus_malware", "reporter_malware", "vt_report_malware"]
        for row in data:
            id=row[-1]
            all_malware=mongo.db.malware_collection.find({"id_malware": id})
            for row_ in all_malware:
                row+=[row_[column] for column in malware_columns]
        list_of_columns+=malware_columns
        return render_template('hash_detailed.html', type=type, list_of_columns=list_of_columns, data=data)
    return render_template('hash_detailed.html')
