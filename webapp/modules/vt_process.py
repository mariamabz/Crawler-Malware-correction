import urllib.request
import os
import json
import requests
from virustotal_python import Virustotal
from celery import Celery
from celery.decorators import periodic_task
from datetime import timedelta
from pymongo import MongoClient
from .init_database import *
import gridfs
from .file_process import *
from .add_to_database import *
from .avclassplusplus import *

def periodic_vt():
    while True:
        client, db = connect_database()
    
        fs = gridfs.GridFSBucket(db)
        for gridout in fs.find():
            id_malware = gridout.filename
            f = db.malware_collection.find( { "id_malware": id_malware })
            if f[0]["vt_report_malware"] is not True:
                md5 = get_file_from_gridfs(db, id_malware).md5
                if get_virustotal(md5) is not None:
                    print("\nVirusTotal of malware id: " + id_malware +  " added")
                    add_vt_report(id_malware, md5)
                else:
                    print("\nVirusTotal of malware id: " + id_malware + " no found")
                time.sleep(60)

def add_vt_report(id_malware, md5):
    vt_report = get_virustotal(md5)
    if vt_report is not None:
        add_vt_collection(vt_report['scan_id'],
                          vt_report['total'],
                          vt_report['positives'],
                          vt_report['resource'],
                          vt_report['response_code'],
                          vt_report['scan_date'],
                          vt_report['permalink'],
                          vt_report['sha256'],
                          vt_report['md5'],
                          vt_report['sha1'],
                          str(vt_report),
                          id_malware)
        client, db = connect_database()
        db.malware_collection.update(
        { "id_malware" : id_malware }, {"$set" : { "vt_report_malware":True }})
        print("YOUUUU AARE",  os.getcwd())
        os.chdir("webapp/avclassplusplus/")
        save_vt_report(vt_report, id_malware)
        save_labels(id_malware)
        os.chdir("../../")
        os.remove("webapp/avclassplusplus/" + id_malware + ".vt")
        client.close()
        return True
    else:
        return False

def get_virustotal(md5):
    url_report = 'https://www.virustotal.com/vtapi/v2/file/report'
    params_report = {'apikey': '628efd0ccafa70545a87bff6b23330a9642e8c58bef203520a57051c298d4518', 'resource': md5}
    response_report = requests.get(url_report, params=params_report)
    if response_report.status_code == 200:
        response_json = response_report.json()
    elif response_report.status_code == 204:
        return;
    
    if not response_json['verbose_msg'] == "Scan finished, information embedded":
        url_scan = 'https://www.virustotal.com/vtapi/v2/file/scan'
        params_scan = {'apikey':'628efd0ccafa70545a87bff6b23330a9642e8c58bef203520a57051c298d4518'}
        #TODO
        return None
    else:
        total = response_json['total']
        positives = response_json['positives']
        scan_id = response_json['scan_id']
        sha1 = response_json['sha1']
        resource = response_json['resource']
        response_code = response_json['response_code']
        scan_date = response_json['scan_date']
        permalink = response_json['permalink']
        sha256 = response_json['sha256']
        md5 = response_json['md5']
        return response_json

def save_vt_report(vt_report, id_malware): 
    with open(str(id_malware) + ".vt", "w+") as outfile:
        json.dump(vt_report, outfile)
        outfile.close()

        
if __name__ == "__main__":
    main()
