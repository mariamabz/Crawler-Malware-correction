import urllib.request
import gridfs
import os
import hashlib
import ssdeep
import pefile
import json
import requests
import mimetypes
from .init_database import *
from .init_connection import *
from virustotal_python import Virustotal


fpath = 'report/'
dir_path = os.path.dirname(os.path.realpath(__file__))

def get_md5(fname):
    """Get malwate MD5
    Params:
    -fname
    Returns:
    - rslt
    """

    hash_md5 = hashlib.md5()
    with open(fpath + fname, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    rslt = hash_md5.hexdigest()
    return rslt

def get_sha256(fname):
    """Get malware sha256
    Params:
    -fname
    Returns:
    - rslt
    """

    hash_sha256 = hashlib.sha256()
    with open(fpath + fname, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha256.update(chunk)
    rslt = hash_sha256.hexdigest()
    return rslt

def get_sha1(fname):
    """Get malware sha1
    Params:
    -fname
    Returns:
    - rslt
    """

    hash_sha1 = hashlib.sha1()
    with open(fpath + fname, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha1.update(chunk)
    rslt = hash_sha1.hexdigest()
    return rslt

def get_ssdeep(fname):
    """Get malware ssdeep
    Params:
    -fname
    Returns:
    - rslt
    """

    hash_ssdeep = ssdeep.Hash()
    with open(fpath + fname, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_ssdeep.update(chunk)
    rslt = hash_ssdeep.digest()
    return rslt

def get_imphash(fname):
    """If the malwre is an exec get the impash
    Params:
    -fname, db
    Returns:
    - imps
    """
    try:
        imps = []
        p = pefile.PE(fpath + fname)
        imphash = p.get_imphash()
        imps.append(imphash)
        return str(imps)
    except:
        return "can't calculate the imphash"

def is_exe(tags):
    """If the malwre is an exec
    Params:
    -tags (source csv urlhaus)
    Returns:
    - boolean
    """
    if "exe" in tags:
        return True
    return False

def file_from_db_to_hd(db, fname):
    fs = gridfs.GridFSBucket(db)
    file = open(fpath + fname, 'wb+')
    fs.download_to_stream_by_name(fname, file)

"""rapport virustotal en json, dump"""
def vt_to_json(vt, fname):
    with open(ftpath + fname, "w") as outfile:
        json.dump(vt, outfile)
        outfile.close()


def connect_gridfs(db):
    fs = gridfs.GridFSBucket(db)
    return fs

def print_gridfs(db):
    """ Afficher la liste des fichiers dans la bdd
    Params:
    -fname
    Returns:
    - rslt
    """

    print("\n********************")
    print("****PRINT GRIDFS**** ")
    print("********************")
    fs = gridfs.GridFSBucket(db)
    for gridout in fs.find():
        print("\n_id: " + str(gridout._id) + "\nfilename: " + str(gridout.filename) + "\ncontent_type: " + str(gridout.contentType))
    print("********************")
    print("**END PRINT GRIDFS**")
    print("********************")

def count_gridfs(db):
    """ Summary of procesed files in database
    Params:
    -db
    Returns:
    -  Print stats from the dabase
    """
    print("\n********************")
    print("***COUNT GRIDFS***")
    print("********************")
    fs = gridfs.GridFSBucket(db)
    count = 0
    for gridout in fs.find():
        count = count + 1
    print("\n--->" + str(count) + " items in GriFS\n")

def get_file_from_gridfs(db, id_file):
    """ Get file from gridfs
    Params:
    -db, id_file
    Returns:
    - 
    """
    fs = gridfs.GridFS(db)
    f = fs.find_one({ "filename" : id_file })
    return f

def id_malware_exist(db, id):
    """ Check if the malware is already the database
    Params:
    -db,id
    Returns:
    - boolean
    """


    count = db.malware_collection.count( { "id_malware": id }) 
    if count == 1:
        return True
    elif count == 0:
        return False
    else:
        print("Database is corrupted")
        return False

def print_database(db):

    """ List elements present in the database
    Params:
    -db
    Returns:
    - 
    """
    print("\n********************")
    print("***PRINT MONGO DB***") 
    print("********************")

    collection = db['malware_collection']
    cursor = collection.find({})
    print("\n*** MALWARE_COLLECTION ***") 
    for document in cursor:
        for x in document:
            print(x + ':', document[x])
        print("\n")
    print("\n")

    collection = db['vt_collection']
    cursor = collection.find({})
    print("\n*** VIRUSTOTAL COLLECTION ***") 
    for document in cursor:
        for x in document:
            print(x + ':', document[x])
        print("\n")
    print("\n")
    
    collection = db['ip_collection']
    cursor = collection.find({})
    print("\n*** IP COLLECTION ***") 
    for document in cursor:
        for x in document:
            print(x + ':', document[x])
        print("\n")
    print("\n")

    collection = db['label_collection']
    cursor = collection.find({})
    print("\n*** LABEL COLLECTION ***") 
    for document in cursor:
        for x in document:
            print(x + ':', document[x])
        print("\n")
    print("\n")

    print("********************")
    print("*END PRINT MONGO DB*")
    print("********************")

def count_database(db):
    """ Summary of processed files in database
    Params:
    -db
    Returns:
    - 
    """
    print("********************")
    print("***COUNT MONGO DB***")
    print("********************")
    count_malware_collection = db.malware_collection.count()
    count_vt_collection = db.vt_collection.count()
    count_label_collection = db.label_collection.count()
    count_ip_collection = db.ip_collection.count()
    print(" ---> " + str(count_malware_collection) + " malwares in database /// ")
    print(" ---> " + str(count_vt_collection) + " virustotal report in database /// ")
    print(" ---> " + str(count_label_collection) + " labels in database /// ")
    print(" ---> " + str(count_ip_collection) + " ip's in database /// ")

def main():
    init_mongo();
    db = connect_database()
    erase_gridfs(db);
    request = init_connection_urlhaus()
    parse_csv_urlhaus(db, request)
    
    print_gridfs(db)
    print_database(db)

if __name__ == "__main__":
    main()
